package quadraticPrimes;

public class Problem27 {
    /**
     * Main method. Equation: n^2 + a.n + b
     * Algo :
     * 1. Run a for loop over all the possible values of coefficients and n, as all values are variables in the equation
     * 2. Check if the value given by equation is a prime number and return the digit with highest value
     *
     * @param args
     */
    public static void main(String[] args) {
        int aCoeff = Integer.MIN_VALUE;
        int bCoeff = Integer.MIN_VALUE;
        int maxN = 0;
        long startTime = System.currentTimeMillis();

        for (int a = -999; a < 1000; a++) {
            for (int b = -1000; b <= 1000; b++) {
                int val = getMaxConsecutivePrime(a, b);
                if (val > maxN) {
                    maxN = val;
                    aCoeff = a;
                    bCoeff = b;
                }
            }
        }
        long endTime = System.currentTimeMillis();
        System.out.println("Maximum no. of primes : " + maxN);
        System.out.println("Product of coefficients " + aCoeff + ", " + bCoeff + " : " + (aCoeff * bCoeff));
        System.out.println("Total time taken : " + (endTime - startTime));
    }

    /**
     * For a given pair of coefficients to the equation : n^2 + a.n + b
     * it runs a loop over all values of n >= 0 and determine the largest value which is not a prime number
     *
     * @param a
     * @param b
     */
    private static int getMaxConsecutivePrime(int a, int b) {
        int n = 0;
        while (n >= 0) {
            int num = (n * n) + (a * n) + b;
            if (!isPrimeNumber(num)) { break; }
            n++;
        }
        return n;
    }

    /**
     * Checks if a given number is a prime number
     *
     * @param num
     */
    private static boolean isPrimeNumber(int num) {
        if (num <= 1 || num % 2 == 0) { return false; }
        for (int i = 3; i * i <= num; i += 2) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    }
}
