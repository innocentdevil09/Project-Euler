package abundantNumbers;

public class Main {
	private static boolean[] isAbundant = new boolean[28124];
	
	private static int getFactorsSum(int n) {
		if (n < 0) throw new IllegalArgumentException();
		int sum = 0;
		for (int i = 1; i*i <= n; i++) {
			int factor1 = 0, factor2 = 0;
			if (n % i == 0) {
				factor1 = i;
				factor2 = n / i;
			}
			if (factor1 != factor2) {
				sum += factor1;
				sum += factor2;
			} else {
				sum += factor1;
			}
		}
		return sum - n;
	}
	private static boolean isAbundant(int n) {
		if (isAbundant[n])
			return true;
		else if (getFactorsSum(n) > n)
			isAbundant[n] = true;
		return isAbundant[n];
	}
	private static boolean isSumOfAbundants(int n) {
		for (int i = 1; i <= n; i++) {
			if (isAbundant(i) && isAbundant(n-i))
				return true;
		}
		return false;
	}
	public static void main(String[] args) {
		long sum = 0;
		for (int i = 1; i <= 28123; i++) {
			if (!isSumOfAbundants(i))
				sum += i;
		}
		System.out.println(sum);
	}
}
