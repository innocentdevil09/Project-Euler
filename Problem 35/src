import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Problem35 {
    /**
     * Variable used to store values of prime numbers
     */
    private static Set<Integer> primeNumbers = new HashSet<>();

    /**
     * Main method to find all circular prime numbers
     *
     * @param args
     */
    public static void main(String[] args) {
        long startTime = System.currentTimeMillis();

        Set<Integer> circularPrimes = new HashSet<>();
        for (int i = 2; i < 1000000; i++) {
            if (isCircularPrime(i)) {
                circularPrimes.add(i);
            }
        }
        long endTime = System.currentTimeMillis();
        System.out.println("Total number of circular primes - " + circularPrimes.size());
        System.out.println("Total time taken - " + (endTime - startTime));
    }

    /**
     * Returns boolean value if a number is circular prime. Algo :
     * 1. Check if the given number is prime
     * 2. Get all the rotations and check if all of them are prime
     *
     * @param n
     */
    private static boolean isCircularPrime(int n) {
        if (!isPrimeNumber(n)) { return false; }
        List<Integer> rotations = getNumberRotation(n);
        for (int num : rotations) {
            if (!isPrimeNumber(num)) { return false; }
        }
        return true;
    }

    /**
     * Checks if a number is a prime number
     *
     * @param n
     */
    private static boolean isPrimeNumber(int n) {
        if (primeNumbers.contains(n)) { return true; }
        if (n == 2) {
            primeNumbers.add(n);
            return true;
        }
        if (n < 2 || n % 2 == 0) { return false; }
        for (int i = 3; i * i <= n; i += 2) {
            if (n % i == 0) { return false; }
        }
        primeNumbers.add(n);
        return true;
    }

    /**
     * Gets all the rotations of a given number.
     * Parse the number into a string, and get all the possible rotated values
     *
     * @param n
     */
    private static List<Integer> getNumberRotation(int n) {
        List<Integer> circulars = new ArrayList<>();
        String number = String.valueOf(n);
        int len = number.length();
        for (int i = 1; i < len; i++) {
            String temp = number.substring(i) + number.substring(0, i);
            Integer tempNum = Integer.parseInt(temp);
            if (tempNum != n) {
                circulars.add(tempNum);
            }
        }
        return circulars;
    }
}
