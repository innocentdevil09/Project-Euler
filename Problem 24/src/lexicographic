package lexicographic;

public class Main {
	
	private static void swap(int[] str, int l, int m) {
		int temp = str[l];
		str[l] = str[m];
		str[m] = temp;
	}
	
	private static void reverse(int[] str, int l, int m) {
		while (l < m) {
			swap(str, l, m);
			l++;
			m--;
		}
	}
	
	private static int findCeiling(int[] str, int s, int l, int m) {
		int ceilingIndex = l;
		for (int i = l+1; i < m; i++) {
			if (str[i] > s && str[i] < str[ceilingIndex])
				ceilingIndex = i;
		}
		return ceilingIndex;
	}
	private static void nextPermutation(int[] array) {
		int size = array.length;
		
		boolean isFinished = false;
		while(!isFinished) {
			int i;
			for (i = size - 2; i >= 0; i--) {
				if (array[i] < array[i+1])
					break;
			}
			if (i < 0)
				isFinished = true;
			else {
				int next = findCeiling(array, array[i], i+1, size);
				swap(array, i, next);
				reverse(array, i+1, size-1);
				break;
			}
		}
	}
	public static void main(String[] args) {
		int[] array = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
		for (int i = 1; i < 1000000; i++) {
			nextPermutation(array);
		}
		for (int j = 0; j < array.length; j++)
			System.out.print(array[j]);
	}
}
