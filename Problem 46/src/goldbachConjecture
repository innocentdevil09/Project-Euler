package goldbachConjecture;

import java.util.ArrayList;
import java.util.List;

public class Problem46 {

    private static boolean isPrimeNumber(int n) {
        if (n == 2) { return true; }
        if (n < 2 || n % 2 == 0) { return false; }
        for (int i = 3; i * i <= n; i += 2) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }

    private static boolean isGoldbachNumber(List<Integer> primeNbrs, int n) {
        boolean b = false;
        for (int primeNumber : primeNbrs) {
            float num = (n - primeNumber) / 2f;
            double numSqrRoot = Math.sqrt(num);
            if (numSqrRoot == (int) numSqrRoot) {
                b = true;
            }
        }
        return b;
    }

    public static void main(String[] args) {
        List<Integer> primeNbrs = new ArrayList<>();
        primeNbrs.add(2);
        int result = 0;

        long startTime = System.currentTimeMillis();
        for (int i = 3; ; i += 2) {
            if (isPrimeNumber(i)) {
                primeNbrs.add(i);
            } else if (isGoldbachNumber(primeNbrs, i)) {
                continue;
            } else {
                result = i;
                break;
            }
        }
        long endTime = System.currentTimeMillis();

        System.out.println("Smallest odd digit not a Goldbach number - " + result);
        System.out.println("Total time taken - " + (endTime - startTime));
    }
}
