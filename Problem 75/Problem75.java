import java.util.HashSet;
import java.util.Set;

public class Problem75 {

    /**
     * Inner class to define pythagoran triplets as an object
     * The APIs of this class includes:
     * 1. length() : length of right-angled triangle by sum of all three sides
     * 2. toString() : string representation of the triplets
     */
    private static class PythagoreanTriplet {

        private int a;
        private int b;
        private int c;

        public PythagoreanTriplet(int a, int b, int c) {
            this.a = Math.min(a, b);
            this.b = Math.max(a, b);
            this.c = c;
        }

        public int length() {
            return this.a + this.b + this.c;
        }

        @Override
        public String toString() {
            return "(" + this.a + ", " + this.b + ", " + this.c + ")";
        }
    }

    /**
     * Method to get greatest common divisor of two numbers
     *
     * @param a
     * @param b
     */
    private static boolean gcd(int a, int b) {
        while (b > 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a == 1;
    }

    /**
     * Main method to execute
     * From the given article :- https://en.wikipedia.org/wiki/Pythagorean_triple#Generating_a_triple
     * Euclid's formula[3] is a fundamental formula for generating Pythagorean triples given an arbitrary pair of
     * integers m and n with m > n > 0. The formula states that the integers
     *
     * a = m^2 - n^2, b = 2mn, c = m^2 + n^2
     *
     * form a Pythagorean triple. The triple generated by Euclid's formula is primitive if and only if m and n are
     * coprime and not both odd.
     * Despite generating all primitive triples, Euclid's formula does not produce all triplesâ€”for example, (9, 12,
     * 15) cannot be generated using integer m and n. This can be remedied by inserting an additional parameter k to
     * the formula. The following will generate all Pythagorean triples uniquely:
     *
     * a = k . (m^2 - n^2), b = k . (2mn), c = k . (m^2 + n^2)
     *
     * Algo :-
     * 1. Start two for loops for values of m and n
     * 2. If gcd(m, n) != 1, then continue
     * 3. Get all triplets for all values of k = 1 to k = threshold limit
     * 4. To get threshold limit of m, consider (a + b + c < threshold)
     * => m^2 - 1 + 2 * m + m^2 + 1 < threshold
     * => 2m^2 + 2m < threshold
     *
     * @param args
     */
    public static void main(String[] args) {
        long startTime = System.currentTimeMillis();

        int threshold = 1500000;
        int[] countArray = new int[threshold + 1];
        Set<String> set = new HashSet<>();

        for (int m = 2; ; m++) {
            if ((m * m) + m > (threshold / 2)) { break; }
            for (int n = m - 1; n > 0; n--) {
                if (!gcd(m, n)) { continue; }
                int a = (m * m) - (n * n);
                int b = 2 * m * n;
                int c = (m * m) + (n * n);

                for (int k = 1; ; k++) {
                    PythagoreanTriplet triplet = new PythagoreanTriplet(k * a, k * b, k * c);
                    if (triplet.length() > threshold) { break; }
                    if (set.contains(triplet.toString())) { continue; }
                    set.add(triplet.toString());

                    countArray[triplet.length()]++;
                }
            }
        }

        int count = 0;
        for (int val : countArray) {
            if (val == 1) { count++; }
        }
        System.out.println(count);
        long endTime = System.currentTimeMillis();
        System.out.println("Time taken : " + (endTime - startTime));
    }
}
