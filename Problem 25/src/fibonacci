package fibonacci;

import java.math.BigInteger;

public class Main {
	private static BigInteger[] fibArray = new BigInteger[5000];
	// 5000 is not an arbitary number. log1.6(10^999) ~= 4900 => Necessary for memoization
	private static BigInteger fibonacci(int n) {
		if (n == 0)
			fibArray[n] = BigInteger.ZERO;
		if (n == 1)
			fibArray[n] = BigInteger.ONE;
		
		if (fibArray[n] == null) 
			fibArray[n] = fibonacci(n-1).add(fibonacci(n-2));
		
		return fibArray[n];
	}
	public static void main(String[] args) {
		long startTime = System.currentTimeMillis();
		int i;
		BigInteger limit = BigInteger.TEN.pow(999);
		for (i = 2; i < 5000; i++) {
			BigInteger val = fibonacci(i);
			if (val.compareTo(limit) >= 0)
				break;
		}
		System.out.println(i);
		long endTime = System.currentTimeMillis();
		System.out.println("Time taken: " + (endTime - startTime));
	}
}
