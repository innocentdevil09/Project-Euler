public class Problem33 {
    /**
     * Main method to get all possible combinations of 2 digit fractions and get digit cancelling fractions
     *
     * @param args
     */
    public static void main(String[] args) {
        long startTime = System.currentTimeMillis();

        int numeratorProduct = 1;
        int denominatorProduct = 1;

        for (int numerator = 11; numerator <= 98; numerator++) {
            if (numerator % 10 == 0) { continue; }
            for (int denominator = numerator + 1; denominator <= 99; denominator++) {
                if (denominator % 10 == 0) { continue; }
                float fraction = (float) numerator / denominator;
                if (fraction == getFraction(String.valueOf(numerator), String.valueOf(denominator))) {
                    numeratorProduct *= numerator;
                    denominatorProduct *= denominator;
                }
            }
        }
        int divisor = getGCD(numeratorProduct, denominatorProduct);
        int result = denominatorProduct / divisor;
        long endTime = System.currentTimeMillis();
        System.out.println("Result - " + result);
        System.out.println("Total time taken - " + (endTime - startTime));
    }

    /**
     * This method removes the common digit from both the numerator and denominator and returns the resulting the
     * resulting fraction value.
     * If no common digit found, return 0.0
     *
     * @param numerator
     * @param denominator
     */
    private static float getFraction(String numerator, String denominator) {
        String commonDigit = "";
        char[] numChars = numerator.toCharArray();
        for (char c : numChars) {
            if (denominator.contains(Character.toString(c))) {
                commonDigit = String.valueOf(c);
            }
        }
        if (commonDigit.isEmpty()) { return 0.0f; }
        numerator = numerator.replaceFirst(commonDigit, "");
        denominator = denominator.replaceFirst(commonDigit, "");

        return Float.parseFloat(numerator) / Float.parseFloat(denominator);
    }

    /**
     * Uses Euclidean Algorithm to get GCD of 2 numbers
     *
     * @param a
     * @param b
     */
    private static int getGCD(int a, int b) {
        if (a == 0 || b == 0) { return 0; }
        if (a == b) { return a; }
        if (a > b) {
            return getGCD(a - b, b);
        } else {
            return getGCD(a, b - a);
        }
    }
}
