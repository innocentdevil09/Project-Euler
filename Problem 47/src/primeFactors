package primeFactors;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Problem47 {
    /**
     * Method to check if a given number is a prime number
     *
     * @param n
     */
    private static boolean isPrimeNumber(int n) {
        if (n == 2) { return true; }
        if (n < 2 || n % 2 == 0) { return false; }
        for (int i = 3; i * i <= n; i += 2) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }

    /**
     * Get all the factors of the given integer
     *
     * @param n
     */
    private static List<Integer> getFactors(int n) {
        List<Integer> list = new ArrayList<>();
        for (int i = 2; i * i <= n; i++) {
            if (n % i == 0) {
                list.add(i);
                list.add(n / i);
            }
        }
        return list;
    }

    /**
     * Gets all the prime factors of a given integer
     *
     * @param n
     */
    private static List<Integer> getPrimeFactors(int n) {
        List<Integer> result = new ArrayList<>();
        List<Integer> factors = getFactors(n);

        for (int factor : factors) {
            if (isPrimeNumber(factor)) {
                result.add(factor);
            } else {
                result.addAll(getPrimeFactors(factor));
            }
        }
        return result;
    }

    /**
     * @param n
     */
    private static Set<Integer> getDistinctPrimeFactors(int n) {
        List<Integer> primeFactors = getPrimeFactors(n);
        return new HashSet<>(primeFactors);
    }

    public static void main(String[] args) {
        long startTime = System.currentTimeMillis();

        int result = 0;
        for (int i = 1; ; i++) {
            Set<Integer> set = getDistinctPrimeFactors(i);
            if (set.size() == 4) {
                boolean b = getDistinctPrimeFactors(i + 1).size() == 4;
                b = b && getDistinctPrimeFactors(i + 2).size() == 4;
                b = b && getDistinctPrimeFactors(i + 3).size() == 4;
                if (b) {
                    result = i;
                    break;
                }
            }
        }
        long endTime = System.currentTimeMillis();

        System.out.println("Smallest of the consecutive numbers with 4 distinct prime factors - " + result);
        System.out.println("Total time taken - " + (endTime - startTime));
    }
}
